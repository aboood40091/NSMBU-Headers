#pragma once

#include <basis/seadTypes.h>

enum PlayerMode
{
    cPlayerMode_Invalid = -1,
    cPlayerMode_Small = 0,
    cPlayerMode_Normal,
    cPlayerMode_Fire,
    cPlayerMode_Mini,
    cPlayerMode_Propeller,
    cPlayerMode_Penguin,
    cPlayerMode_Ice,
    cPlayerMode_Squirrel,
    cPlayerMode_PSquirrel,
    cPlayerMode_Num
};
static_assert(cPlayerMode_Num == 9);
static_assert(sizeof(PlayerMode) == 4);

enum PlayerModeModel
{
    cPlayerModeModel_Normal = 0,
    cPlayerModeModel_Small,
    cPlayerModeModel_Propeller,
    cPlayerModeModel_Penguin,
    cPlayerModeModel_Squirrel,
    cPlayerModeModel_Num
};
static_assert(cPlayerModeModel_Num == 5);
static_assert(sizeof(PlayerModeModel) == 4);

enum PlayerCharacter
{
    cPlayerCharacter_Mario = 0,
    cPlayerCharacter_Luigi,
    cPlayerCharacter_YellowToad,
    cPlayerCharacter_BlueToad,
    cPlayerCharacter_Nabbit,
    cPlayerCharacter_Mii,
    cPlayerCharacter_Unused,    // No idea why this exists
    cPlayerCharacter_Num
};
static_assert(cPlayerCharacter_Num == 7);
static_assert(sizeof(PlayerCharacter) == 4);

enum PlayerCharacterVoice
{
    cVoice_Mario = 0,
    cVoice_Luigi,
    cVoice_YellowToad,
    cVoice_BlueToad,
    cVoice_Nabbit,
    cVoice_MiiMale1,
    cVoice_MiiMale2,
    cVoice_MiiMale3,
    cVoice_MiiMale4,
    cVoice_MiiFemale1,
    cVoice_MiiFemale2,
    cVoice_MiiFemale3,
    cVoice_MiiFemale4,
    cVoice_Yoshi,
    cVoice_Blank,   // ...?
    cVoice_Num
};
static_assert(cVoice_Num == 15);
static_assert(sizeof(PlayerCharacterVoice) == 4);

enum PlayerVoiceID
{
    PLAYER_JOIN = 0,
    PJ_JUMP,
    PJ_SPIN_JUMP,
    PLAYER_DECIDE,
    CS_FALL_INTO_MAP,
    CS_COURSE_IN,
    CS_COURSE_IN_MULTI,
    CS_COURSE_IN_HARD,
    CS_COURSE_MISS,
    CS_JUMP,
    CS_DECIDE_JOIN,
    CS_ENCOUNT,
    CS_SHOVED,
    CS_CHASE_SHIP,
    CS_NOTICE_JR,
    GAME_OVER,
    CONTINUE,
    CONTINUE_COURSE,
    MOTIAGE,
    NAGERU,
    MOTIAGE_PLAYER,
    JUMP_2ND,
    JUMP_3RD,
    YOSHI_JUMP,
    JR_A_BATTLE_APP,
    WALL_KICK,
    PRPL_JUMP,
    PNGN_SLIDE,
    ROPE_CATCH,
    ROPE_RELEASE,
    ROPE_FALL,
    GOAL_POLE_CATCH,
    CLIFF_DIVE,
    CLIFF_UP,
    CLIFF_DOWN,
    CANNON_SHOT_S,
    CANNON_SHOT,
    BALLOON_HELP__TV,
    BALLOON_HELP__RC,
    HUKKATSU,
    DAMAGE_LAST__1,
    DAMAGE_LAST__2,
    TIMEUP,
    TIMEUP_MULTI,
    SCROLL_OUT,
    DAMAGE_FIRE,
    DAMAGE_FREEZE,
    DAMAGE_POISON,
    DAMAGE_ELEC,
    DAMAGE_EATEN,
    INTO_SANDPILLAR,
    QUAKE,
    STOMPED,
    HIP_ATTACKED,
    TYUKAN,
    GET_STAR,
    ITEM_COMPLETE,
    CLEAR_NORMAL,
    CLEAR_ANOTHER,
    CLEAR_MULTI,
    CLEAR_HELPED,
    CLEAR_BOSS,
    CLEAR_LAST_BOSS,
    SAVE_PRINCESS,
    CS_COMPLETE_DEMO,
    GET_PRIZE,
    FLOOR_FALL,
    NOTICE,
    MISS_PRINCESS,
    MG_IH_ACTIVE_TV,
    MG_IH_ACTIVE_RC,

    // NSMBU-unique voice lines start from here
    CS_CMN_COURSE_CLEAR,
    CS_CMN_SHIP_ATTACK,
    CS_SHIP_SURPRISE,
    CS_CAPTURED,
    CS_SHIP_CLEAR,
    CS_CANNON_SHOT,
    CS_CMN_ITEM_MOTIAGE,
    KISSED_PEACH,
    SURPRISED_PEACH,

    cPlayerVoiceID_Num
};
static_assert(cPlayerVoiceID_Num == 80);

enum PlayerTallType
{
    cTallType_Mini = 0,
    cTallType_Small,
    cTallType_Normal,
    cTallType_Num
};
static_assert(cTallType_Num == 3);

namespace PlayerAnmID {

enum
{
    cInvalid = -1,

    wait = 0,
    walk,
    run,
    b_dash,
    b_dash2,
    jump,
    jump2,
    jumped,
    _2jmp_c_1,
    _2jmp_c_2,
    _2jumped,
    roll_jump,
    _2jump2,
    mame_jump2,
    turn,
    turned,
    hipsr,
    hipat,
    hiped,
    hip_to_stoop,
    stoop,
    stoop_start,
    slip,
    sliped,
    slip_to_stoop,
    carry_walk,
    carry_throw,
    carry_wait,
    carry_shake,
    carry_shake_waitL,
    carry_shake_waitR,
    carry_walk__2,
    wsld,
    fire_at,
    swim_fire_at,
    swim_fire_at2,
    P_swim,
    swim,
    swim_wait,
    swim_throw,
    swim_walk,
    swim_standing,
    paddle_1,
    paddle_2,
    paddle_carry,
    tree_start,
    tree_wait,
    tree_climb,
    tree_pose,
    monkey_start,
    monkey_wait_r,
    monkey_wait_l,
    monkey_r_to_l,
    monkey_l_to_r,
    net_wait,
    net_walk1,
    net_walk2,
    net_attack,
    pea_plant,
    pea_plant_st,
    pea_plant_wait,
    wall_wait,
    wall_walk_l,
    wall_walk_r,
    hang_start,
    hang_up,
    hang_wait,
    hang_walk_l,
    hang_walk_r,
    w_jump1,
    w_jump2,
    _2jumped__2,
    jump_hang,
    spin_st,
    spin_end,
    spin_jump2,
    spin_jump_end,
    damF,
    damB,
    dowF,
    dowB,
    firejmp,
    e_shock,
    dead,
    dead_pose,
    dead_wait,
    goal_start,
    goal_wait,
    goal_pose,
    goal_jump,
    goal_jump_ed,
    goal_puton_cap,
    PL_goal_puton_cap,
    P_goal_puton_cap,
    M_goal_puton_cap,
    PL_Rgoal_puton_cap,
    P_Rgoal_puton_cap,
    M_Rgoal_puton_cap,
    KB_Rgoal_puton_cap,
    Mii_Rgoal_puton_cap,
    goal_hangflag_st,
    goal_hangflag,
    Reat,
    Reat_out,
    Reat_success,
    Reat_fail,
    Reat_successB,
    Reat_successB__2, // Exact same as Reat_successB
    RSeat,
    RSeat_out,
    RSeat_success,
    RSeat_fail,
    RSeat_successB,
    RSeat_successB__2, // Exact same as RSeat_successB
    carryP_start,
    carryP_walk,
    carryP_throw,
    carryP_wait,
    ride_on,
    RFjump,
    YB_set,
    YB_set_to_wait,
    star_roll,
    Sjump,
    Sjump2,
    Sjumped,
    get_down,
    ice_turn,
    ice_turned,
    ice_slipF,
    ice_slipB,
    rope_swing,
    shoot,
    shoot_slip,
    shoot_slip_end,
    wait__2, // Exact same as wait
    low_walk_start,
    low_walk,
    swim_pipe,
    door_walk,
    PL_spin_jump,
    waitL,
    waitR,
    fire_at2,
    blow_up,
    P_slip,
    P_slip_jump,
    P_slip_jump2,
    run__YB_RFjump,
    stamp,
    waitR__2, // Same as waitR except for flags
    waitL__2, // Same as waitL except for flags
    waitR3,
    waitL3,
    boss_key_get,
    balloon_wait,
    balloon_wait_disconnect,
    ride_wait,
    slope_waitL,
    slope_waitR,
    slope_waitL2,
    slope_waitR2,
    carryP_waitL,
    carryP_waitR,
    carry_waitL,
    carry_waitR,
    spin_jump3,
    P_paddle_1,
    P_paddle_2,
    YB_poseL,
    YB_poseR,
    YB_gorl_wait,
    M_run,
    M_b_dash,
    M_glideL,
    M_glideR,
    M_glideL_carry,
    M_glideR_carry,
    M_flutterL,
    M_flutterR,
    M_wsld_L,
    M_wsld_R,
    hang2_rot,
    hang2_wait,
    wait_select,
    course_in,
    dm_glad,
    dm_glad2,
    dm_glad2_wait,
    dm_glad3,
    dm_glad3_wait,
    dm_glad4_wait,
    dm_sad,
    dm_sad2,
    dm_glad3__2, // Same as dm_glad3 except for texAnmType
    dm_glad3__3, // Same as dm_glad3 except for texAnmType
    coin_comp,
    wait__3,
    wait__4,
    dm_course_in,
    wait__5,
    wait__6,
    dm_notice,
    dm_noti_wait,
    dm_notice2,
    dm_lookaround,
    dm_lookaround_wait,
    wait__7,
    dm_escort,
    dm_escort_wait,
    dm_ending1,
    dm_ending1_wait,
    dm_ending2,
    staff_clap_wait,
    staff_wait,
    staff_clap1,
    dm_surprise,
    dm_surp_wait,
    wait__8,
    wait__9,
    dm_escort__2,
    ending_wait,
    dead_pose__2,
    stoop__2,
    spin_jump3__2,
    wait__10,

    cNum
};
static_assert(cNum == 226);

}
